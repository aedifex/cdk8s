orbs:
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
version: 2.1

jobs:
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          Region in which resources are deployed
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region>>
      - run:
          command: |
            kubectl get services
          name: Test cluster

  update-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          Region in which resources are deployed
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region>>
      - run:
          command: |
            kubectl get services
          name: Test cluster
      - run:
          name: Install envar utility (envsubst)
          command: sudo apt-get install gettext-base
      - run:
          name: Update Cluster
          command: |
            cat yaml/hello-kubernetes.custom-message.tmpl | \
            envsubst > yaml/hello-kubernetes.custom-message.yaml && \
            kubectl apply -f yaml/hello-kubernetes.custom-message.yaml --validate=false
  build-docker:
    machine: true
    working_directory: ~/src
    steps:
      - checkout
      - run:
          name: Build Image
          command: |
            docker build --no-cache --build-arg IMAGE_CREATE_DATE="`date`" -t "chriscircleci/hello-kubernetes:blackops" .
            # docker build .
            # docker images
      - run:
          name: Docker Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS

workflows:
  provision-cluster:
    jobs:
      - aws-eks/create-cluster:
         cluster-name: another-eks-demo
         aws-region: us-west-2
         context: cdk8s
      - test-cluster:
         cluster-name: another-eks-demo
         aws-region: us-west-2
         context: cdk8s
         requires:
           - aws-eks/create-cluster
      #- aws-eks/install-helm-on-cluster:
      #   cluster-name: another-eks-demo
      #   aws-region: us-west-2
      #   context: cdk8s
      #   requires:
      #     - test-cluster
      # # - aws-eks/install-helm-chart:
      # #    cluster-name: another-eks-demo
      # #    aws-region: us-west-2
      # #    chart: helloworld-chart
      # #    context: cdk8s
      # #    requires:
      # #      - aws-eks/install-helm-on-cluster
      - update-cluster:
          cluster-name: another-eks-demo
          aws-region: us-west-2
          context: cdk8s
          requires:
            - aws-eks/install-helm-on-cluster
      # - approve-cluster-termination:
      #     type: approval
      #     requires:
      #       - update-cluster
      # - aws-eks/delete-cluster:
      #     cluster-name: another-eks-demo
      #     aws-region: us-west-2
      #     context: cdk8s
      #     requires:
      #       - approve-cluster-termination
  build-app-&-deploy-via-helm:
    jobs:
      - build-docker:
          context: cdk8s
