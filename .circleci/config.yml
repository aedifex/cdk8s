orbs:
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
  slack: circleci/slack@2.0.0
version: 2.1

jobs:
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          Region in which resources are deployed
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region>>
      - run:
          command: |
            kubectl get services
          name: Test cluster

  update-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          Region in which resources are deployed
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region>>
      - run:
          command: |
            kubectl get services
          name: Test cluster
      - run:
          name: Install envar utility (envsubst)
          command: sudo apt-get install gettext-base
      - run:
          name: Update Cluster
          command: |
            cat yaml/hello-kubernetes.custom-message.tmpl | \
            envsubst > yaml/hello-kubernetes.custom-message.yaml && \
            kubectl apply -f yaml/hello-kubernetes.custom-message.yaml --validate=false
      - slack/notify:
          mentions: 'chris'
          webhook: ${SLACK_WEBHOOK}
          message: ":fullyoperational: Pipeline: $CIRCLE_WORKFLOW_ID was successful! \n$CIRCLE_BUILD_URL \nhttps://damp-bastion-21277.herokuapp.com/"
  
  build-docker:
    machine: true
    working_directory: ~/src
    steps:
      - checkout
      - run:
          name: Build Image
          command: |
            docker build --no-cache --build-arg IMAGE_CREATE_DATE="`date`" -t "chriscircleci/hello-kubernetes:blackops" .
            # docker build .
            # docker images
      - run:
          name: Docker Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
  # "Dummy" job declarations
  setup-heroku-environment:
    working_directory: ~/project
    machine: true
    steps:
    - run:
        name: Provision Heroku Dyno
        command: echo "Setting up dyno"

  build-node-app:
    working_directory: ~/project
    docker:
    - image: circleci/node:10.16.3
    steps:
    - run:
        name: Update NPM
        command: echo "Update NPM"
  
  code-linting:
    working_directory: ~/project
    docker:
    - image: circleci/node:10.16.3
    steps:
    - checkout
  
  code-coverage:
    working_directory: ~/project
    docker:
    - image: circleci/node:10.16.3
    steps:
    - checkout
  
  vulnerability-scans:
    working_directory: ~/project
    docker:
    - image: circleci/node:10.16.3
    steps:
    - checkout

  build-docker-image:
    working_directory: ~/project
    docker:
    - image: circleci/node:10.16.3
    steps:
    - checkout  
  
  run-integration-tests:
    working_directory: ~/project
    machine: true
    steps:
    - checkout
  
  browser-tests:
    working_directory: ~/project
    docker:
    - image: circleci/node:10.16.3
    steps:
    - checkout

  deploy-application:
    working_directory: ~/project
    docker:
    - image: circleci/node:10.16.3
    resource_class: small
    steps:
    - setup_remote_docker
    - checkout
    - attach_workspace:
          at: ~/project
    - run:
        name: Provision Heroku Dyno
        command: echo "Deploying appication"
    - run:
        name: setup heroku cli
        command: |
          chmod +x scripts/setup_herokucli.sh && scripts/setup_herokucli.sh
    - run:
        name: Update NPM
        command: 'sudo npm install -g npm@latest'
    - run:
        name: Fetch dependencies
        command: npm install
    - run:
        name: Load Docker image from tar file
        command: docker load --input image.tar
    - run:
        name: Build and Tag Docker Image
        command: |
          docker push registry.heroku.com/damp-bastion-21277/web:${CIRCLE_SHA1}
    - run:
        name: Deploy Application
        command: chmod +x scripts/deploy.sh && scripts/deploy.sh
    - slack/notify:
          mentions: 'chris'
          webhook: ${SLACK_WEBHOOK}
          message: ":fullyoperational: Pipeline: $CIRCLE_WORKFLOW_ID was successful! \n$CIRCLE_BUILD_URL \nhttp://a2d5fec0d3c164bbc92d428fdbd01d5e-1667835882.us-west-2.elb.amazonaws.com/"

workflows:
  provision-cluster:
    jobs:
      - aws-eks/create-cluster:
          cluster-name: another-eks-demo
          aws-region: us-west-2
          context: cdk8s
      - test-cluster:
          cluster-name: another-eks-demo
          aws-region: us-west-2
          context: cdk8s
          requires:
            - aws-eks/create-cluster
      - aws-eks/install-helm-on-cluster:
          cluster-name: another-eks-demo
          aws-region: us-west-2
          context: cdk8s
          requires:
            - test-cluster
      - hold-update:
          type: approval
          requires:
            - aws-eks/install-helm-on-cluster
      - update-cluster:
          cluster-name: another-eks-demo
          aws-region: us-west-2
          context: cdk8s
          requires:
            - test-cluster
      - hold:
          type: approval
          requires:
            - update-cluster
      - aws-eks/delete-cluster:
          cluster-name: another-eks-demo
          aws-region: us-west-2
          context: cdk8s
          requires:
            - hold
  

  # build-test-&-deploy:
  #   jobs:
  #     - build-node-app
  #     - setup-heroku-environment
  #     - code-linting:
  #         requires:
  #           - build-node-app
  #     - code-coverage:
  #         requires:
  #           - build-node-app
  #     - vulnerability-scans:
  #         requires:
  #           - build-node-app
  #     - build-docker-image:
  #         requires:
  #           - code-coverage
  #           - vulnerability-scans
  #     - run-integration-tests:
  #         requires:
  #           - build-docker-image
  #     - browser-tests:
  #         requires:
  #           - build-docker-image
  #     - update-cluster:
  #          cluster-name: another-eks-demo
  #          aws-region: us-west-2
  #          context: cdk8s
  #          requires:
  #           - browser-tests
  #           - run-integration-tests
  #           - setup-heroku-environment
  #           - build-docker-image